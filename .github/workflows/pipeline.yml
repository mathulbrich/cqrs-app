name: CI-CD Pipeline

on:
  push:
    paths-ignore:
      - "**/README.md"
      - "docs/**"
      - "env/**"
      - "scripts/**"
      - ".github/workflows/docs_pipeline.yml"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    container:
      image: node:18-slim
    env:
      NODE_ENV: ci
      SERVICE_NAME: cqrs-app
    steps:
      - run: env
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install NPM dependencies
        run: yarn install --frozen-lockfile
      - name: Build
        run: yarn build:prod
      - name: Clean for packaging
        run: |
          set -e
          apt update && apt install -y tar gzip zip
          rm -rf node_modules
          yarn install --production --frozen-lockfile
          zip -qr /tmp/${SERVICE_NAME}.zip dist docs node_modules
      - name: Upload lambda artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.SERVICE_NAME }}
          path: /tmp/${{ env.SERVICE_NAME }}.zip

  lint:
    name: Lint
    runs-on: ubuntu-latest
    container:
      image: node:18-slim
    env:
      NODE_ENV: ci
    steps:
      - run: env
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install NPM dependencies
        run: yarn install --frozen-lockfile
      - name: Run lint
        run: yarn lint

  lambda-test:
    name: Lambda Test
    runs-on: ubuntu-latest
    needs: build
    env:
      SERVICE_NAME: cqrs-app
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Download lambda artifact
      uses: actions/download-artifact@v2
      with:
          name: ${{ env.SERVICE_NAME }}
          path: /tmp
    - name: Check lambda
      run: |
        mv /tmp/${SERVICE_NAME}.zip test/lambda/lambda.zip
        cd test/lambda

        HTTP_CODE=$(sam local invoke -e event.json | jq -r '.statusCode')
        echo "Health response (HTTP CODE): $HTTP_CODE"
        if [[ ${HTTP_CODE} -ne 200 ]]; then
          exit 1
        fi

  test:
    name: Unit and Integration Tests
    runs-on: ubuntu-latest
    environment: test
    container:
      image: node:18-slim
    services:
      dynamodb:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000
      sqs:
        image: softwaremill/elasticmq-native
        ports:
          - 9324:9324
      s3:
        image: fclairamb/minio-github-actions
        ports:
          - 9000:9000
        env:
          MINIO_ACCESS_KEY: cqrsappaccesskeyid
          MINIO_SECRET_KEY: cqrsappsecretaccesskey
    steps:
      - run: env
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install NPM dependencies
        run: yarn install --frozen-lockfile
      - name: Run Tests
        env:
          APP_NAME: cqrs-app
          APP_PORT: 3000
          AWS_ACCESS_KEY_ID: cqrsappaccesskeyid
          AWS_REGION: us-east-1
          AWS_SECRET_ACCESS_KEY: cqrsappsecretaccesskey
          DYNAMO_DB_ENDPOINT: http://dynamodb:8000
          NODE_ENV: ci
          S3_STORAGE_ENDPOINT: http://s3:9000
          SQS_QUEUE_BASE_URL: http://sqs:9324/queue/
          SQS_QUEUE_ENDPOINT: http://sqs:9324
          SQS_QUEUE_SUFFIX: -pipeline
        run: |
          yarn test:cov
      - name: Store test results
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: coverage/
          retention-days: 1
      - name: Upload coverage to Codecov
        if: github.ref == 'refs/heads/master'
        uses: codecov/codecov-action@v3
